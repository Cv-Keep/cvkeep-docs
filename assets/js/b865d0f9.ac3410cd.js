"use strict";(self.webpackChunkcvkeep_docs=self.webpackChunkcvkeep_docs||[]).push([[692],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),f=o,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||l;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<l;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9992:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),l=(t(7294),t(3905)),a=["components"],i={sidebar_position:6},c="Running Locally",p={unversionedId:"running-locally",id:"running-locally",isDocsHomePage:!1,title:"Running Locally",description:"First of all, lets assume you have cloned or downloaded both the applications: cvkeep-frontend and cvkeep-backend sources. If you didn't, please go to the requirements section of this documentation.",source:"@site/docs/running-locally.md",sourceDirName:".",slug:"/running-locally",permalink:"/running-locally",editUrl:"https://github.com/Cv-Keep/cvkeep-docs/edit/master/docs/docs/running-locally.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"mySidebar",previous:{title:"Frontend Setup",permalink:"/frontend-setup"},next:{title:"Deploying",permalink:"/deploying"}},u=[{value:"Backend",id:"backend",children:[]},{value:"Front End",id:"front-end",children:[]},{value:"Front End Server",id:"front-end-server",children:[]}],s={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"running-locally"},"Running Locally"),(0,l.kt)("p",null,"First of all, lets assume you have cloned or downloaded both the applications: ",(0,l.kt)("strong",{parentName:"p"},"cvkeep-frontend")," and ",(0,l.kt)("strong",{parentName:"p"},"cvkeep-backend")," sources. If you didn't, please go to the ",(0,l.kt)("a",{parentName:"p",href:"/requirements"},"requirements")," section of this documentation."),(0,l.kt)("h3",{id:"backend"},"Backend"),(0,l.kt)("p",null,"Lets start running the API. First of all, go to the ",(0,l.kt)("inlineCode",{parentName:"p"},"cvkeep-backend")," project root. Now, copy the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file content to a ",(0,l.kt)("inlineCode",{parentName:"p"},".env.local")," file, and change the env variables in according to your needings. To check how to configure the .env, please, read the ",(0,l.kt)("a",{parentName:"p",href:"/backend-setup"},"Backend Setup")," section of this documentation. Generally for the local mode you only need to configure your Mongo URI on the ",(0,l.kt)("inlineCode",{parentName:"p"},".env.local")," file. Now, if you didn't installed the dependencies, please run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install\n")),(0,l.kt)("p",null,"With dependencies installed now run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"npm run serve\n")),(0,l.kt)("p",null,"If all goes well, you will see the following information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Server is running with stage "development" on port 5000\nEnv: /projects/cvkeep-backend/.env.local\n')),(0,l.kt)("p",null,"With the default env values, your API will be available on: http://localhost:5000/."),(0,l.kt)("h3",{id:"front-end"},"Front End"),(0,l.kt)("p",null,"To run the front end, first copy the ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file content to a ",(0,l.kt)("inlineCode",{parentName:"p"},".env.local")," file, and change the env variables in according to your needings. Now, if you didn't installed the dependencies, please run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install\n")),(0,l.kt)("p",null,"With dependencies installed now run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"npm run serve\n")),(0,l.kt)("p",null,"If all goes well, you will see the following information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  App running at:\n  - Local:   https://localhost:8080/ \n  - Network: https://localhost:8080/\n\n  Note that the development build is not optimized.\n  To create a production build, run npm run build.\n")),(0,l.kt)("p",null,"With the default env values, the front end will be available on: http://localhost:8080/."),(0,l.kt)("h3",{id:"front-end-server"},"Front End Server"),(0,l.kt)("p",null,"There is an Express Application meant to serve the front end. This is optional when in local mode, but can be very useful for debbuging. To run the front server, just run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm run serve:prod\n")),(0,l.kt)("p",null,"It will run a production-like server, but locally. You can now access the front end at http://localhost:9090"))}d.isMDXComponent=!0}}]);